mapply(rep, 1:4, 4:1)
mapply(function(x, y) seq_len(x) + y,
c(a =  1, b = 2, c = 3),  # names from first
c(A = 10, B = 0, C = -10))
seq_along(2:5)
?seq_along
q()
?ddply
??ddply
?aggregate
library(plyr)
??ddply
?selet
?select
library(plyr)
library(dplyr)
?select
?arrange
q()
install.packages(c("foreign", "survival"))
library(plyr)
?install.packages
install.packages(c('plyr','dplyr','magrittr'))
library(plyr)
library(dplyr)
install.packages(c('raster','rgdal','sp','raster','rgeos'))
install.packages('hzar')
install.packages('adegenet')
library(ape)(
)
library(ape)
license()
RShowDoc("COPYING")
?read.nexus.data
q()
l <- 30   #length
v <- 1    #passwords
x1 <- TRUE #Capital letters
x2 <- TRUE #Numbers
x3 <- TRUE #Symbols
c("`","~","!","@","#","$","%","^","&","*","(",")","_","-","+","=","{","}","[","]","|",
":",";","'","<",">",",",".","?","/"," ") -> s
set <- letters
if (x1) {c(set,LETTERS) -> set}
if (x2) {c(set,0:9) -> set}
if (x3) {c(set,s) -> set}
#c(letters,LETTERS,0:9,s) -> set
length(set) -> n
c(length(letters),length(LETTERS),length(0:9),length(s)) -> m
floor(m/length(set)*l) -> m  # Get minimums for ea. character type
character(0) -> d
for (z in 1:v){
character(0) -> p
while (sum(p %in% letters)<m[1] | sum(p %in% LETTERS)<m[2] | sum(p %in% 0:9)<m[3] | sum(p %in% s)<m[4])
{
character(0) -> p
for (i in 1:l){
c(p,set[sample(1:n,1)]) -> p
}
#print(paste(p,sep="",collapse="")) # to show options not meeting m criteria
}
paste(p,sep="",collapse="")-> d[z]
}
as.data.frame(d) -> d
"password" -> names(d)
d
rm(d)
q()
getwd()
"JQ900644" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900645" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900646" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900726" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900647" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900648" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900649" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900650" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900727" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
?write.nexus.file
filenames <- list.files("/Users/dave/Desktop/genbank haring")
filenames
?read
?readLines
readLines("/Users/dave/Desktop/genbank haring/JQ900644.txt")
path <- "/Users/dave/Desktop/genbank haring"
filenames <- list.files(path)
filenames
?sub
gnames <- sub(".txt",filenames)
gnames <- sub("\.txt",filenames)
filenames <- list.files(path)
gnames <- sub(".txt",filenames)
gnames <- sub(".txt","",filenames)
gnames
path <- "/Users/dave/Desktop/genbank haring"
filenames <- list.files(path)
gnames <- sub(".txt","",filenames)
lapply(gnames,function(x) NULL)
?lapply
sapply(gnames,function(x) NULL,USE.NAMES=T)
path <- "/Users/dave/Desktop/genbank haring"
filenames <- list.files(path)
gnames <- sub(".txt","",filenames)
sapply(gnames,function(x) NULL,USE.NAMES=T)
mylist <- sapply(gnames,function(x) NULL,USE.NAMES=T)
filenames
paste0(path,filenames)
path <- "/Users/dave/Desktop/genbank haring/"
filenames <- list.files(path)
gnames <- sub(".txt","",filenames)
mylist <- sapply(gnames,function(x) NULL,USE.NAMES=T)
paste0(path,filenames)
mylist <- lapply(paste0(path,filenames),function(x){
readLines(x))
mylist <- lapply(paste0(path,filenames),function(x){
readLines(x)})
mylist
gnames -> names(mylist)
mylist
gnames -> names(mylist)
write.nexus.data(mylist,"haring.nex",interleaved=F)
getwd()
?write.FASTA
write.FASTA(mylist,"haring.fasta")
mylist
write.FASTA(mylist,"haring.fasta")
write.dna(mylist,"haring.fasta")
write.dna(mylist,"haring.fasta",format='fasta')
write.dna(mylist,"haring.fasta",format='fasta',nbcol=-1)
write.dna(mylist,"haring.fasta",format='fasta',nbcol=-1,colw=10000)
?as.alignment
mylist
lapply(mylist,nchar)
lapply(mylist,nchar) %>% unname
lapply(mylist,nchar) %>% unlist
library(magrittr)
lapply(mylist,nchar) %>% unlist
?dist.dna
?read.nexus
as.DNAbin(read.nexus.data("/Users/dave/Desktop/haring.nex"))
?BIONJ
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
plot
?bionj
"EU070774" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
read.nexus.data("/Users/dave/Desktop/haring.nex")
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
plot
?root
read.nexus.data("/Users/dave/Desktop/haring.nex")
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root('EU070774') %>%
plot
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root('EU070774')
?root
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root(outgroup='EU070774')
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
names
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna
?root
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root(outgroup="EU070774",resolve.root=T) %>%
plot
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root(outgroup="EU070774",resolve.root=T)
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root(outgroup="EU070774")
?root
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root(outgroup="EU070774",resolve.root=T) %>%
plot
getwd()
quit()
q()
2018-160
q()
95+163
?binomial.test
?binomial
?exact.test
?exact
?binom.test
binom.test(x=3,n=11,p=(17/23),alternative="two.sided")
binom.test(x=3,n=11,p=(17/23),alternative="two.sided")
binom.test(x=5,n=8,p=(8/9),alternative="two.sided")
binom.test(x=1,n=3,p=(8/9),alternative="two.sided")
binom.test(x=1,n=4,p=(8/9),alternative="two.sided")
3690+3500+892+363+133+221
360+387+350+260+140
q()
1*10/100000
190/99990*99990/100000
1e-4*/.Last.value
1e-4/.0019
1e-4+190/99990*99990/100000
1e-4/.002
.0001/(.0001*.0002)
.0001/(.0001*.002)
1/10000/(1/10000+1.9e-3)
10/100000/(.5*10/100000+.5*190/99990)
.00005/(.00005+.5*.002)
q()
3*.9
3*.8
20/50*3
30/50*3
q()
45/50*3
q()
d <- structure(list(Angle = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90,
100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220,
230, 240, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 250
), Frequency = c(0, 0, 0.001, 2, 4, 18.03, 11, 12, 5, 7, 10,
13, 2, 0.003, 0.01, 0, 1, 0.05, 2, 3, 3.7, 6, 0, 0, 0, 0, 0.2,
0.006, 0, 0, 0, 0, 0, 0, 0, 0)), .Names = c("Angle", "Frequency"
), row.names = c(NA, 36L), class = "data.frame")
str(d)
?structure
d
library(ggplot2)
ggplot(d, aes(x = Angle, y = Frequency)) +
coord_polar(theta = "x", start = -pi/45) +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = seq(0, 360, 60))
?coord_polar
?geom_bar
?scale_x_continuous
q()
?scan
q()
q()
setwd('/Users/dave/crows/ms/Scripts/11_hzar_clines')
getwd()
list.files()
library(hzar)
read.csv("pop_haps_pacific.csv",stringsAsFactors=F) -> pops
mydata <- hzar.doMolecularData1DPops(
distance=pops$dist,
pObs=pops$mtDNA_A,
nEff=pops$n,
siteID=pops$pop)
clineModel <- hzar.makeCline1DFreq(data=mydata,tails="none")
clineModel <- hzar.model.addCenterRange(clineModel, 1000,6000)
clineModel <- hzar.model.addMaxWidth(meta.model=clineModel,maxValue=7000)
fitRequest <- hzar.first.fitRequest.old.ML(model=clineModel,obsData=mydata,verbose=T)  #Didn't work
#fitRequest <- hzar.first.fitRequest.gC(gModel=clineModel,obsData=mydata,verbose=F)
#fitRequest$mcmcParam$chainLength <- 1e6
#fitRequest <- hzar.first.fitRequest.gC(gModel=clineModel,obsData=mydata,verbose=F)
#fitRequest$mcmcParam$chainLength <- 1e6
#fitRequest$mcmcParam$burnin <- 1e5
#fitRequest$mcmcParam$verbosity <- 0
#myfit <- hzar.doFit(fitRequest)
myfitlist_mtDNA <- hzar.chain.doSeq(hzar.request=fitRequest,count=3,collapse=F)
hzar.plot.cline(myfitlist_mtDNA[[3]],xlab="Smoothed coastline distance in km (AK to CA)",ylab="American mtDNA",main="hzar.plot.cline()")
#PDF graph version
pdf("cline_cred_mtDNA.pdf",6,6)
hzar.plot.fzCline(fit3_mtDNA,xlab="Smoothed coastline distance in km (AK to CA)",ylab="American mtDNA",main="hzar.plot.cline()")
#hzar.plot.cline(myfitlist_mtDNA[[3]],xlab="Smoothed coastline distance in km (AK to CA)",ylab="American mtDNA",main="hzar.plot.cline()")
dev.off()
#Fit to data group to enable next steps
hzar.fit2DataGroup(myfitlist_mtDNA[[3]]) -> fit3_mtDNA
#PDF graph version
pdf("cline_cred_mtDNA.pdf",6,6)
hzar.plot.fzCline(fit3_mtDNA,xlab="Smoothed coastline distance in km (AK to CA)",ylab="American mtDNA",main="hzar.plot.cline()")
#hzar.plot.cline(myfitlist_mtDNA[[3]],xlab="Smoothed coastline distance in km (AK to CA)",ylab="American mtDNA",main="hzar.plot.cline()")
dev.off()
hzar.get.ML.cline(myfitlist_mtDNA[[3]])$param.all$width
hzar.get.ML.cline(myfitlist_mtDNA[[3]])$param.all$center
#Extract center & +/- 2 LL range
hzar.getLLCutParam(fit3_mtDNA,"width",2)
hzar.getLLCutParam(fit3_mtDNA,"center",2)
library(adegenet)
library(hzar)
library(magrittr)
read.structure("Cb.s62.r0.05.maf0.02.het0.5.str.tsv.coastal.unlinked.nomd.str",
n.ind=48,n.loc=905,onerowperind=F,
col.lab=1,col.pop=0,col.others=0,
row.marknames=1,NA.char="0") -> str
pop <- substr(rownames(str@tab),1,nchar(rownames(str@tab))-2)
#names(pop) <- NULL
str$pop <- as.factor(pop)
# ## PCA Coastal only
sum(is.na(str$tab))
X <- scaleGen(str,NA.method='mean')
pca1 <- dudi.pca(X,cent=F,scale=F,scannf=F,nf=2)
#barplot(pca1$eig[1:50],main="PCA eigenvalues", col=heat.colors(50))
# #
## Extract PCA1 scores
pca1$li$Axis1 -> p1
# flip so that 0=AK 1=CA
-p1 -> p1
p1
#Convert to (0,1) range standardized NOW FOR POPULATION MEANS
#Using linear transformation
#round(.0232921*p1+.415035,4) -> p
min0 =  -16.5497709  # mean of untransformed Homer -pc1
minf =  0
max0 =  20.4010785 #mean of untransformed ca -pc1
maxf =  1
a = (maxf-minf)/(max0-min0)
b = maxf-a*max0
p = a*p1+b
## Hybrid zone cline analysis
## Read distances for populations
read.csv("crow_geo_COASTAL_distance.csv",header=T,stringsAsFactors=F) -> d
## Population names
gsub("[0-9]","",rownames(str@tab)) -> popids
#unique(popids) -> popids
## Output vector of distances
d$distance -> dists
## Get population means
sapply(unique(popids),function(x){mean(p[which(popids %in% x)])},USE.NAMES=F) %>% round(4) -> means
#unname(means) -> means
#qqnorm(means)
## Get population variances
sapply(unique(popids),function(x){var(p[which(popids %in% x)])},USE.NAMES=F) -> vars
#unname(vars) -> vars
## Get population counts
sapply(unique(popids),function(x){length(p[which(popids %in% x)])},USE.NAMES=F) -> counts
#unname(counts) -> counts
data.frame(popids=unique(popids),dists,means,vars,counts) -> m
mydata <- hzar.doNormalData1DPops(distance=dists,siteID=unique(popids),muObs=means,varObs=vars,nEff=counts)
clineModel <- hzar.makeCline1DNormal(data=mydata,tails="none")
clineModel <- hzar.model.addCenterRange(clineModel, 1000,6000)
clineModel <- hzar.model.addMaxWidth(meta.model=clineModel,maxValue=7000)
#fitRequest <- hzar.first.fitRequest.old.ML(obsData=mydata,model=clineModel,verbose=T)  #Didn't work
fitRequest <- hzar.first.fitRequest.gC(gModel=clineModel,obsData=mydata,verbose=F)
#fitRequest$mcmcParam$chainLength <- 1e6
#fitRequest$mcmcParam$burnin <- 1e5
#fitRequest$mcmcParam$verbosity <- 0
#myfit <- hzar.doFit(fitRequest)
myfitlist_pca1 <- hzar.chain.doSeq(hzar.request=fitRequest,count=3,collapse=F)
'#CC3311' -> red
'#0077BB' -> blue
#Create a function to generate a continuous color palette
rbPal <- colorRampPalette(c(blue,red))
#This adds a column of color values
# based on the y values
pca1_colors <- rbPal(100)[as.numeric(cut(means,breaks = 100))]
mtDNA_colors <- rbPal(100)[as.numeric(cut(pops$mtDNA_A,breaks = 100))]
pdf("cline_both2.pdf",5.5,5.5,useDingbats=F)
par(mar=c(4.1,4.1,4.1,2.6))
hzar.plot.cline(myfitlist_pca1[[3]],xlab="Pacific coastline (km)",ylab="Population value",xlim=c(0,7000),pch=NA)
hzar.plot.cline(myfitlist_mtDNA[[3]],add=T,lty=2,pch=NA)
# Get rid of line past points
rect( max(dists), .95, 7100, 1.05, col='white', lty=0)
rect( min(dists), -.05, -100, .05, col='white', lty=0)
points(dists,means,pch=3,col=pca1_colors) #plot pca1 data
points(pops$dist,pops$mtDNA_A,pch=1,col=mtDNA_colors) #plot mtDNA data
abline(v=c(3542,4864,5185,5656),lty=3,col='darkgray')
mtext(at=c(1671,4203,5024,5420,6428),text=c('AK','BC','A','OR','CA'),side=1,line=-1,cex=0.8)
mtext(at=c(5024),text=c('W'),side=1,line=-1.7,cex=0.8)
#mtext(at=c(0,7000),text=c('AK','CA'),side=1,line=-1)
legend(x=0,y=1.15,c("mtDNA fr(American)","Genomic mean PC1"),lty=c(2,1),pch=c(1,3),bg="white",cex=.9,bty="n")
dev.off()
pdf("cline_both2.pdf",5.5,5.5,useDingbats=F)
par(mar=c(4.1,4.1,4.1,2.6))
hzar.plot.cline(myfitlist_pca1[[3]],xlab="Pacific coastline (km)",ylab="Population value",xlim=c(0,7000),pch=NA)
hzar.plot.cline(myfitlist_mtDNA[[2]],add=T,lty=2,pch=NA)
# Get rid of line past points
rect( max(dists), .95, 7100, 1.05, col='white', lty=0)
rect( min(dists), -.05, -100, .05, col='white', lty=0)
points(dists,means,pch=3,col=pca1_colors) #plot pca1 data
points(pops$dist,pops$mtDNA_A,pch=1,col=mtDNA_colors) #plot mtDNA data
abline(v=c(3542,4864,5185,5656),lty=3,col='darkgray')
mtext(at=c(1671,4203,5024,5420,6428),text=c('AK','BC','A','OR','CA'),side=1,line=-1,cex=0.8)
mtext(at=c(5024),text=c('W'),side=1,line=-1.7,cex=0.8)
#mtext(at=c(0,7000),text=c('AK','CA'),side=1,line=-1)
legend(x=0,y=1.15,c("mtDNA fr(American)","Genomic mean PC1"),lty=c(2,1),pch=c(1,3),bg="white",cex=.9,bty="n")
dev.off()
#Fit to data group to enable next steps
hzar.fit2DataGroup(myfitlist_pca1[[3]]) -> fit3_pca1
#PDF graph version
pdf("pca1_cline_cred.pdf",6,6)
hzar.plot.fzCline(fit3_pca1,xlab="Smoothed coastline distance in km (AK to CA)",ylab="adegenet PC1",main="hzar.plot.cline()")
#hzar.plot.cline(myfitlist_pca1[[3]],xlab="Smoothed coastline distance in km (AK to CA)",ylab="adegenet PC1",main="hzar.plot.cline()")
dev.off()
hzar.get.ML.cline(myfitlist_pca1[[3]])$param.all$width
mydata <- hzar.doNormalData1DPops(distance=dists,siteID=unique(popids),muObs=means,varObs=vars,nEff=counts)
clineModel <- hzar.makeCline1DNormal(data=mydata,tails="none")
clineModel <- hzar.model.addCenterRange(clineModel, 1000,6000)
clineModel <- hzar.model.addMaxWidth(meta.model=clineModel,maxValue=7000)
#fitRequest <- hzar.first.fitRequest.old.ML(obsData=mydata,model=clineModel,verbose=T)  #Didn't work
fitRequest <- hzar.first.fitRequest.gC(gModel=clineModel,obsData=mydata,verbose=F)
#fitRequest$mcmcParam$chainLength <- 1e6
#fitRequest$mcmcParam$burnin <- 1e5
#fitRequest$mcmcParam$verbosity <- 0
#myfit <- hzar.doFit(fitRequest)
myfitlist_pca1 <- hzar.chain.doSeq(hzar.request=fitRequest,count=3,collapse=F)
'#CC3311' -> red
'#0077BB' -> blue
#Create a function to generate a continuous color palette
rbPal <- colorRampPalette(c(blue,red))
#This adds a column of color values
# based on the y values
pca1_colors <- rbPal(100)[as.numeric(cut(means,breaks = 100))]
mtDNA_colors <- rbPal(100)[as.numeric(cut(pops$mtDNA_A,breaks = 100))]
pdf("cline_both2.pdf",5.5,5.5,useDingbats=F)
par(mar=c(4.1,4.1,4.1,2.6))
hzar.plot.cline(myfitlist_pca1[[3]],xlab="Pacific coastline (km)",ylab="Population value",xlim=c(0,7000),pch=NA)
hzar.plot.cline(myfitlist_mtDNA[[3]],add=T,lty=2,pch=NA)
# Get rid of line past points
rect( max(dists), .95, 7100, 1.05, col='white', lty=0)
rect( min(dists), -.05, -100, .05, col='white', lty=0)
points(dists,means,pch=3,col=pca1_colors) #plot pca1 data
points(pops$dist,pops$mtDNA_A,pch=1,col=mtDNA_colors) #plot mtDNA data
abline(v=c(3542,4864,5185,5656),lty=3,col='darkgray')
mtext(at=c(1671,4203,5024,5420,6428),text=c('AK','BC','A','OR','CA'),side=1,line=-1,cex=0.8)
mtext(at=c(5024),text=c('W'),side=1,line=-1.7,cex=0.8)
#mtext(at=c(0,7000),text=c('AK','CA'),side=1,line=-1)
legend(x=0,y=1.15,c("mtDNA fr(American)","Genomic mean PC1"),lty=c(2,1),pch=c(1,3),bg="white",cex=.9,bty="n")
dev.off()
q()
