721620/599188440
1/.Last.value
721620*.01
q()
31*20*52
40*20*52
2650*3*4
31*15*52
40*15*52
44*15*52
42*15*52
41*15*52
40*15*52
35*20*52
35*15*52
31*40*52
(44-31)/44
347*3
165-151
15
5+13+8+6+17+12
8.7e-5
8.7e-5 * 1000
8.7e-5 * 1000 * 40
100/30/1000
8.7e-5
3.3e-2
3.3e-3
100/30
100/30/1000
3.44*30
6.86*30
630/28
28*117
630+2940
28*117+2940
6216-3570
q()
2772
95*24
95*48
95*60
95*50+2772*2
95*48+2772*2
95*30+2772
95*40+2772
95*35+2772
95*30+2772
356/5000*60000
262+257+228+193+188+170+151+141
110/9.8
q()
26.72/200
getwd()
install.packages('introgress')
library(introgress)
install.packages(mvtnorm)
install.packages('mvtnorm')
library(introgress)
seq_len(8)
?seq_len
seq_len(f=2,t=4,l=8)
seq_len(f=2,t=4)
seq_len(7)
seq_len(11)
seq_len(pi)
seq_along(letters)
data.frame(letters=letters)
seq_along(data.frame(letters=letters))
seq_along(data.frame(letters=letters)[,1])
?seq_along
for (i in seq_along(letters)) {print(letters[i])}
for (i in seq_along(letters)) {cat(letters[i])}
for (i in seq_along(letters)) {print(letters[i])}
?cat
for (i in seq_along(letters)) {cat(letters[i],"\n")}
for (i in seq_along(letters)) {print(letters[i])}
q()
2800+108*30
2800+108*35
?mapply
mapply(rep, 1:4, 4:1)
mapply(function(x, y) seq_len(x) + y,
c(a =  1, b = 2, c = 3),  # names from first
c(A = 10, B = 0, C = -10))
seq_along(2:5)
?seq_along
q()
?ddply
??ddply
?aggregate
library(plyr)
??ddply
?selet
?select
library(plyr)
library(dplyr)
?select
?arrange
q()
install.packages(c("foreign", "survival"))
library(plyr)
?install.packages
install.packages(c('plyr','dplyr','magrittr'))
library(plyr)
library(dplyr)
install.packages(c('raster','rgdal','sp','raster','rgeos'))
install.packages('hzar')
install.packages('adegenet')
library(ape)(
)
library(ape)
license()
RShowDoc("COPYING")
?read.nexus.data
q()
l <- 30   #length
v <- 1    #passwords
x1 <- TRUE #Capital letters
x2 <- TRUE #Numbers
x3 <- TRUE #Symbols
c("`","~","!","@","#","$","%","^","&","*","(",")","_","-","+","=","{","}","[","]","|",
":",";","'","<",">",",",".","?","/"," ") -> s
set <- letters
if (x1) {c(set,LETTERS) -> set}
if (x2) {c(set,0:9) -> set}
if (x3) {c(set,s) -> set}
#c(letters,LETTERS,0:9,s) -> set
length(set) -> n
c(length(letters),length(LETTERS),length(0:9),length(s)) -> m
floor(m/length(set)*l) -> m  # Get minimums for ea. character type
character(0) -> d
for (z in 1:v){
character(0) -> p
while (sum(p %in% letters)<m[1] | sum(p %in% LETTERS)<m[2] | sum(p %in% 0:9)<m[3] | sum(p %in% s)<m[4])
{
character(0) -> p
for (i in 1:l){
c(p,set[sample(1:n,1)]) -> p
}
#print(paste(p,sep="",collapse="")) # to show options not meeting m criteria
}
paste(p,sep="",collapse="")-> d[z]
}
as.data.frame(d) -> d
"password" -> names(d)
d
rm(d)
q()
getwd()
"JQ900644" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900645" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900646" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900726" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900647" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900648" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900649" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900650" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
"JQ900727" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
## Added change for git demog
?write.nexus.file
filenames <- list.files("/Users/dave/Desktop/genbank haring")
filenames
?read
?readLines
readLines("/Users/dave/Desktop/genbank haring/JQ900644.txt")
path <- "/Users/dave/Desktop/genbank haring"
filenames <- list.files(path)
filenames
?sub
gnames <- sub(".txt",filenames)
gnames <- sub("\.txt",filenames)
filenames <- list.files(path)
gnames <- sub(".txt",filenames)
gnames <- sub(".txt","",filenames)
gnames
path <- "/Users/dave/Desktop/genbank haring"
filenames <- list.files(path)
gnames <- sub(".txt","",filenames)
lapply(gnames,function(x) NULL)
?lapply
sapply(gnames,function(x) NULL,USE.NAMES=T)
path <- "/Users/dave/Desktop/genbank haring"
filenames <- list.files(path)
gnames <- sub(".txt","",filenames)
sapply(gnames,function(x) NULL,USE.NAMES=T)
mylist <- sapply(gnames,function(x) NULL,USE.NAMES=T)
filenames
paste0(path,filenames)
path <- "/Users/dave/Desktop/genbank haring/"
filenames <- list.files(path)
gnames <- sub(".txt","",filenames)
mylist <- sapply(gnames,function(x) NULL,USE.NAMES=T)
paste0(path,filenames)
mylist <- lapply(paste0(path,filenames),function(x){
readLines(x))
mylist <- lapply(paste0(path,filenames),function(x){
readLines(x)})
mylist
gnames -> names(mylist)
mylist
gnames -> names(mylist)
write.nexus.data(mylist,"haring.nex",interleaved=F)
getwd()
?write.FASTA
write.FASTA(mylist,"haring.fasta")
mylist
write.FASTA(mylist,"haring.fasta")
write.dna(mylist,"haring.fasta")
write.dna(mylist,"haring.fasta",format='fasta')
write.dna(mylist,"haring.fasta",format='fasta',nbcol=-1)
write.dna(mylist,"haring.fasta",format='fasta',nbcol=-1,colw=10000)
?as.alignment
mylist
lapply(mylist,nchar)
lapply(mylist,nchar) %>% unname
lapply(mylist,nchar) %>% unlist
library(magrittr)
lapply(mylist,nchar) %>% unlist
?dist.dna
?read.nexus
as.DNAbin(read.nexus.data("/Users/dave/Desktop/haring.nex"))
?BIONJ
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
plot
?bionj
"EU070774" -> gb   # Input accession number
library(ape)
read.GenBank(gb,as.character=T) -> a
vapply(unlist(a),toupper,"A",USE.NAMES=F) -> a
paste(gb,".txt",sep="") -> f
cat(a,file=f,sep="")
read.nexus.data("/Users/dave/Desktop/haring.nex")
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
plot
?root
read.nexus.data("/Users/dave/Desktop/haring.nex")
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root('EU070774') %>%
plot
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root('EU070774')
?root
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root(outgroup='EU070774')
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
names
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna
?root
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root(outgroup="EU070774",resolve.root=T) %>%
plot
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root(outgroup="EU070774",resolve.root=T)
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root(outgroup="EU070774")
?root
read.nexus.data("/Users/dave/Desktop/haring.nex") %>%
as.DNAbin %>%
dist.dna %>%
bionj %>%
root(outgroup="EU070774",resolve.root=T) %>%
plot
getwd()
quit()
q()
2018-160
q()
95+163
?binomial.test
?binomial
?exact.test
?exact
?binom.test
binom.test(x=3,n=11,p=(17/23),alternative="two.sided")
binom.test(x=3,n=11,p=(17/23),alternative="two.sided")
binom.test(x=5,n=8,p=(8/9),alternative="two.sided")
binom.test(x=1,n=3,p=(8/9),alternative="two.sided")
binom.test(x=1,n=4,p=(8/9),alternative="two.sided")
3690+3500+892+363+133+221
360+387+350+260+140
q()
1*10/100000
190/99990*99990/100000
1e-4*/.Last.value
1e-4/.0019
1e-4+190/99990*99990/100000
1e-4/.002
.0001/(.0001*.0002)
.0001/(.0001*.002)
1/10000/(1/10000+1.9e-3)
10/100000/(.5*10/100000+.5*190/99990)
.00005/(.00005+.5*.002)
q()
3*.9
3*.8
20/50*3
30/50*3
q()
45/50*3
q()
d <- structure(list(Angle = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90,
100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220,
230, 240, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 250
), Frequency = c(0, 0, 0.001, 2, 4, 18.03, 11, 12, 5, 7, 10,
13, 2, 0.003, 0.01, 0, 1, 0.05, 2, 3, 3.7, 6, 0, 0, 0, 0, 0.2,
0.006, 0, 0, 0, 0, 0, 0, 0, 0)), .Names = c("Angle", "Frequency"
), row.names = c(NA, 36L), class = "data.frame")
str(d)
?structure
d
library(ggplot2)
ggplot(d, aes(x = Angle, y = Frequency)) +
coord_polar(theta = "x", start = -pi/45) +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = seq(0, 360, 60))
?coord_polar
?geom_bar
?scale_x_continuous
q()
?scan
q()
q()
setwd('/Users/dave/crows/ms/Scripts/09_structure_plot')
getwd()
library(data.table)
library(magrittr)
fread("K2.indfile.outfile.csv",header=F,data.table=F) -> s
fread("haplotypes.csv") -> h
s$V1 -> rownames(s)
s[,-1] -> s ## Remove "indiv" column
c("A","N") -> colnames(s)
str(s)
rownames(s) %>% sub("ca","nca",.) -> rownames(s)
indexing <- c(18:25,34:37,5:8,43:46,55:62,38:41,26:29,51:54,14:17,1:4,9:13,30:33,47:50,42)
haps <- sapply(rownames(s),
function(x){h[which(h$rad.id==x),'haplotype.NJ']}
) %>% unname %>% unlist
isA <- haps %in% c('A')
s[c(indexing),] -> s
haps <- haps[indexing]
isA <- isA[indexing]
62 -> n
x.txt <- (1:n)-0.5
## Get label midpoint values
pop.numbers <- rownames(s) %>%
substr(nchar(.),nchar(.))
pop.names <- rownames(s) %>%
gsub("[012345]","",.) %>%
unique
pop.values <- pop.names %>%
sapply(.,function(x){which((rownames(s) %>% gsub("[012345]","",.))==x)})
group.at <-pop.values %>%
lapply(mean) %>%
unlist
group.at <- 62.5 - group.at
pop.values <- lapply(pop.values,function(x){62.5-x})
pop.values <- lapply(pop.values,function(x){
if (length(x)==1) {return(c(x-.25,x+.25))} else {return(c(min(x)-.25,max(x)+.25))}})
## Stacked bar plot grouped by locality
#graph presets
haplotype_x <- 2.15
text_x <- -.05
brace_x <- -.1
brace_width <- .025
#popnum_x <- -.05  # no longer plotting population numbers
'#CC3311' -> red
'#0077BB' -> blue
#png("custom3.png",w=13/6,h=6.5,units="in",res=1000)
pdf(paste0("structure_plot_final.pdf"),13/6,6.5,useDingbats=F)
par(mar=rep(0,4))
barplot(2*as.table(t(s[nrow(s):1,])),xaxt="n",yaxt="n",xaxs="i",yaxs="i",space=0,col=c(red,blue),main='',horiz=T,xlim=c(-0.7,2.3),ylim=c(-0.1,62.1))
#axis(1,at=(1:n)-.5,labels=rownames(s),lwd=0,lwd.ticks=0,las=2) # or lwd.ticks=1
#mtext(at=x.txt,side=4,line=0,text=rev(haps),col=rev(ifelse(isA,'red','blue')))
#mtext(at=x.txt,side=4,line=0,text=".",,padj=-.1,col=rev(ifelse(isA,'red','blue')),cex=3.5)
points(rep(haplotype_x,nrow(s)),x.txt,pch=21,bg=rev(ifelse(isA,red,blue)))
text(x=text_x,y=group.at-.1,labels=pop.names,pos=2,cex=0.8)
for (i in 1:length(pop.values)){
segments(brace_x,pop.values[[i]][1],brace_x,pop.values[[i]][2],ljoin=1)
segments(brace_x,unlist(pop.values),brace_x+brace_width,unlist(pop.values),ljoin=1)
}
#text(x=popnum_x,y=x.txt,labels=rev(pop.numbers),cex=0.75)
#mtext(rev(unique(rownames(s))),side=2,
#abline(v=seq(4,44,by=4),lwd=2,col="black") # Lines to separate my localities (line optional)
dev.off()
2*as.table(t(s[nrow(s):1,]))
nrow(s):1
t(s[nrow(s):1,])
dim(.Last.value)
#png("custom3.png",w=13/6,h=6.5,units="in",res=1000)
pdf(paste0("structure_plot_final.pdf"),13/6,6.5,useDingbats=F)
par(mar=rep(0,4))
barplot(2*as.table(t(s[nrow(s):1,2:1])),xaxt="n",yaxt="n",xaxs="i",yaxs="i",space=0,col=c(red,blue),main='',horiz=T,xlim=c(-0.7,2.3),ylim=c(-0.1,62.1))
#axis(1,at=(1:n)-.5,labels=rownames(s),lwd=0,lwd.ticks=0,las=2) # or lwd.ticks=1
#mtext(at=x.txt,side=4,line=0,text=rev(haps),col=rev(ifelse(isA,'red','blue')))
#mtext(at=x.txt,side=4,line=0,text=".",,padj=-.1,col=rev(ifelse(isA,'red','blue')),cex=3.5)
points(rep(haplotype_x,nrow(s)),x.txt,pch=21,bg=rev(ifelse(isA,red,blue)))
text(x=text_x,y=group.at-.1,labels=pop.names,pos=2,cex=0.8)
for (i in 1:length(pop.values)){
segments(brace_x,pop.values[[i]][1],brace_x,pop.values[[i]][2],ljoin=1)
segments(brace_x,unlist(pop.values),brace_x+brace_width,unlist(pop.values),ljoin=1)
}
#text(x=popnum_x,y=x.txt,labels=rev(pop.numbers),cex=0.75)
#mtext(rev(unique(rownames(s))),side=2,
#abline(v=seq(4,44,by=4),lwd=2,col="black") # Lines to separate my localities (line optional)
dev.off()
#png("custom3.png",w=13/6,h=6.5,units="in",res=1000)
pdf(paste0("structure_plot_final.pdf"),13/6,6.5,useDingbats=F)
par(mar=rep(0,4))
barplot(2*as.table(t(s[nrow(s):1,2:1])),xaxt="n",yaxt="n",xaxs="i",yaxs="i",space=0,col=c(blue,red),main='',horiz=T,xlim=c(-0.7,2.3),ylim=c(-0.1,62.1))
#axis(1,at=(1:n)-.5,labels=rownames(s),lwd=0,lwd.ticks=0,las=2) # or lwd.ticks=1
#mtext(at=x.txt,side=4,line=0,text=rev(haps),col=rev(ifelse(isA,'red','blue')))
#mtext(at=x.txt,side=4,line=0,text=".",,padj=-.1,col=rev(ifelse(isA,'red','blue')),cex=3.5)
points(rep(haplotype_x,nrow(s)),x.txt,pch=21,bg=rev(ifelse(isA,red,blue)))
text(x=text_x,y=group.at-.1,labels=pop.names,pos=2,cex=0.8)
for (i in 1:length(pop.values)){
segments(brace_x,pop.values[[i]][1],brace_x,pop.values[[i]][2],ljoin=1)
segments(brace_x,unlist(pop.values),brace_x+brace_width,unlist(pop.values),ljoin=1)
}
#text(x=popnum_x,y=x.txt,labels=rev(pop.numbers),cex=0.75)
#mtext(rev(unique(rownames(s))),side=2,
#abline(v=seq(4,44,by=4),lwd=2,col="black") # Lines to separate my localities (line optional)
dev.off()
q()
